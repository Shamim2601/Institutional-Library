--total 3 triggers and 6 PROCEDURE/functions  2 sequences 

CREATE OR REPLACE TRIGGER DELETE_BOOK
BEFORE DELETE
ON BOOK
FOR EACH ROW
DECLARE
    V_BOOK_ID NUMBER(10);
    V_MEMBER_ID NUMBER(10,0);
BEGIN
    V_BOOK_ID := :OLD.BOOK_ID;
    BEGIN
       DELETE FROM FAV_LIST
       WHERE FAV_LIST.BOOK_ID = V_BOOK_ID;

       DELETE FROM BOOKLIST_ACADEMIC
       WHERE BOOKLIST_ACADEMIC.BOOK_ID = V_BOOK_ID;

       DELETE FROM BOOKLIST_OTHERS
       WHERE BOOKLIST_OTHERS.BOOK_ID = V_BOOK_ID;

       DELETE FROM REVIEW_LIST
       WHERE REVIEW_LIST.BOOK_ID = V_BOOK_ID;
       --DBMS_OUTPUT.PUT_LINE('DELETED');
    END;

    FOR R IN (SELECT * FROM ISSUE_LIST WHERE ISSUE_LIST.BOOK_ID = V_BOOK_ID)
    LOOP
        V_MEMBER_ID := R.MEMBER_ID;
        UPDATE MEMBER SET MEMBER.NUM_OF_ISSUE = (MEMBER.NUM_OF_ISSUE - 1)
        WHERE MEMBER_ID = V_MEMBER_ID;
    END LOOP;
    BEGIN
        DELETE FROM ISSUE_LIST
        WHERE ISSUE_LIST.BOOK_ID = V_BOOK_ID;

    END;
END;
/

CREATE OR REPLACE TRIGGER ISSUE_BOOK
BEFORE INSERT
ON ISSUE_LIST
FOR EACH ROW
DECLARE
    V_BOOK_ID NUMBER(10);
    V_MEMBER_ID NUMBER(10,0);
BEGIN
    V_BOOK_ID := :NEW.BOOK_ID;
    V_MEMBER_ID := :NEW.MEMBER_ID;
    UPDATE MEMBER SET MEMBER.NUM_OF_ISSUE = (MEMBER.NUM_OF_ISSUE + 1)
    WHERE MEMBER_ID = V_MEMBER_ID;

    UPDATE BOOK SET BOOK.STATUS = 'NOT AVAILABLE'
    WHERE BOOK.BOOK_ID = V_BOOK_ID;
   -- DBMS_OUTPUT.PUT_LINE('INSERTED');
END;
/

CREATE OR REPLACE TRIGGER DELETE_ISSUE
BEFORE DELETE
ON ISSUE_LIST
FOR EACH ROW
DECLARE
    V_BOOK_ID NUMBER(10);
    V_MEMBER_ID NUMBER(10,0);
BEGIN
    V_BOOK_ID := :OLD.BOOK_ID;
    V_MEMBER_ID := :OLD.MEMBER_ID;

    UPDATE BOOK SET BOOK.STATUS = 'AVAILABLE'
    WHERE BOOK_ID = V_BOOK_ID;

    UPDATE MEMBER SET MEMBER.NUM_OF_ISSUE = (MEMBER.NUM_OF_ISSUE - 1)
    WHERE MEMBER_ID = V_MEMBER_ID;

END;
/

--PROCEDURE to INSERT member and book in multiple table
DECLARE
NEW_MEMBER_ID NUMBER(10);
BEGIN
    GENERATE_MEMBER_ID(1,NEW_MEMBER_ID);
    INSERT INTO MEMBER (MEMBER_ID, MEMBER_NAME, EMAIL, PHONE_NUMBER, BLOOD_GROUP, DATE_OF_BIRTH, ADMIN_ID, PASSWORD,NUM_OF_ISSUE,DEPT)
    VALUES (NEW_MEMBER_ID,:1,:2,:3,:4,:5,:6,:7,:8,:9);
    INSERT INTO MEMBER_STUDENT (STUDENT_ID, RESIDENCE, MEMBER_ID) VALUES (:10,:11,NEW_MEMBER_ID);
END;   

DECLARE
 NEW_BOOK_ID NUMBER(10);
BEGIN
    GENERATE_BOOK_ID(2,NEW_BOOK_ID);
    INSERT INTO BOOK (BOOK_ID, BOOK_NAME, AUTHOR_ID, PUBLISHER_NAME, COVER_IMAGE, STATUS, DATE_OF_ARRIVAL, YEAR,
    EDITION, NO_OF_PAGES, LANGUAGE, ADMIN_ID) VALUES (NEW_BOOK_ID,:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11);
    INSERT INTO BOOKLIST_ACADEMIC (BOOK_ID, SUBJECT, DEPARTMENT) VALUES (NEW_BOOK_ID,:12,:13);
END;

--PROCEDURE for calculating fine
DECLARE
DAYS NUMBER(10);
BEGIN
FOR R IN (SELECT ISSUE_LIST.ISSUE_DATE, MEMBER.FINE, MEMBER.MEMBER_ID FROM ISSUE_LIST JOIN MEMBER ON ISSUE_LIST.MEMBER_ID = MEMBER.MEMBER_ID)
    LOOP
        SELECT TRUNC(SYSDATE - R.ISSUE_DATE) INTO DAYS
        FROM DUAL;
        IF(DAYS >14) THEN
            UPDATE MEMBER SET FINE = FINE+ (DAYS - 14) * 5
            WHERE MEMBER_ID = R.MEMBER_ID;
        END IF;
    END LOOP;
END;

-- function to generate unique book/member id of specific sequence
CREATE OR REPLACE FUNCTION ID_GENERATOR(N IN NUMBER,ID IN NUMBER)
RETURN NUMBER IS
 I NUMBER(10) := N;
 APPEND NUMBER := ID;
 ANSWER NUMBER;
BEGIN
  WHILE I > 0
  LOOP
    I := I/10;
    APPEND := APPEND * 10;
  END LOOP;
  ANSWER := APPEND + N;
  RETURN ANSWER;
END;
/

CREATE OR REPLACE PROCEDURE GENERATE_BOOK_ID(PRE_ID IN NUMBER,REQ_ID OUT NUMBER) IS
BEGIN
   REQ_ID := ID_GENERATOR( BOOK__ID__SEQ.nextval, PRE_ID);
END;
/

CREATE OR REPLACE PROCEDURE GENERATE_MEMBER_ID(PRE_ID IN NUMBER,REQ_ID OUT NUMBER) IS
BEGIN
   REQ_ID := ID_GENERATOR( MEMBER__ID__SEQ.nextval, PRE_ID);
END;
/

CREATE SEQUENCE BOOK__ID__SEQ INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE MEMBER__ID__SEQ INCREMENT BY 1 START WITH 1;


