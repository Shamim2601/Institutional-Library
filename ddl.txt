-- Create tables query

CREATE TABLE "C##INSLIB"."ADMIN" 
   (	"ADMIN_ID" VARCHAR2(255) NOT NULL ENABLE, 
	"ADMIN_PSW" VARCHAR2(255), 
	"NAME" VARCHAR2(255), 
	"EMAIL" VARCHAR2(255), 
	"PHONE_NUMBER" VARCHAR2(20), 
	 PRIMARY KEY ("ADMIN_ID")
	 )
	 	 
CREATE TABLE "C##INSLIB"."APPLICANT" 
   (	"NAME" VARCHAR2(255),
	"TYPE" VARCHAR2(255);
	"DESIGNATION" VARCHAR2(255), 
	"DEPT" VARCHAR2(255), 
	"ID" VARCHAR2(255), 
	"DATE_OF_BIRTH" DATE, 
	"ADDRESS" VARCHAR2(255), 
	"EMAIL" VARCHAR2(255), 
	"PHONE_NUMBER" NUMBER(11,0), 
	"BLOOD_GROUP" VARCHAR2(255),
	"PASSWORD" VARCHAR2(255) NOT NULL ENABLE,
	"RESIDENCE" VARCHAR2(255),
   )	 
	 
CREATE TABLE "C##INSLIB"."AUTHOR" 
   (	"AUTHOR_ID" VARCHAR2(5) NOT NULL ENABLE, 
	"AUTHOR_NAME" VARCHAR2(255) NOT NULL ENABLE, 
	"NATIONALITY" VARCHAR2(255), 
	"LIFE_SPAN" VARCHAR2(255), 
	 PRIMARY KEY ("AUTHOR_ID")
	 )
	 
CREATE TABLE "C##INSLIB"."BOOK" 
   (	
	 "BOOK_ID" NUMBER(10), 
	"BOOK_NAME" VARCHAR2(255), 
	"AUTHOR_ID" VARCHAR2(5), 
	"PUBLISHER_NAME" VARCHAR2(255), 
	"COVER_IMAGE" BLOB, 
	"STATUS" VARCHAR2(255), 
	"DATE_OF_ARRIVAL" DATE, 
	"YEAR" NUMBER, 
	"EDITION" VARCHAR2(255), 
	"NO_OF_PAGES" NUMBER, 
	"LANGUAGE" VARCHAR2(255),
	"ADMIN_ID" VARCHAR2(255), 
	 CHECK ("BOOK_ID" IS NOT NULL) ENABLE, 
	 PRIMARY KEY ("BOOK_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE, 
	 FOREIGN KEY ("AUTHOR_ID")
	  REFERENCES "C##INSLIB"."AUTHOR" ("AUTHOR_ID") ENABLE, 
	 CONSTRAINT "BOOK_PUB_FK" FOREIGN KEY ("PUBLISHER_NAME")
	  REFERENCES "C##INSLIB"."PUBLISHER" ("PUBLISHER_NAME") ENABLE, 
	 CONSTRAINT "BOOK_AD_FK" FOREIGN KEY ("ADMIN_ID")
	  REFERENCES "C##INSLIB"."ADMIN" ("ADMIN_ID") ENABLE
   )
	
CREATE TABLE "C##INSLIB"."BOOKLIST_ACADEMIC" 
   (	"BOOK_ID" NUMBER(10,0), 
	"SUBJECT" VARCHAR2(255), 
	"TOPIC" VARCHAR2(255), 
	"DEPARTMENT" VARCHAR2(255),
	 CONSTRAINT "AC_BOOK_FK" FOREIGN KEY ("BOOK_ID")
	  REFERENCES "C##INSLIB"."BOOK" ("BOOK_ID") ENABLE
   )
		
CREATE TABLE "C##INSLIB"."BOOKLIST_OTHERS" 
   (	"BOOK_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"GENRE" VARCHAR2(255), 
	"CATEGORY" VARCHAR2(255), 
	 CONSTRAINT "OT_BOOK_FK" FOREIGN KEY ("BOOK_ID")
	  REFERENCES "C##INSLIB"."BOOK" ("BOOK_ID") ENABLE
   )
	
CREATE TABLE "C##INSLIB"."ISSUE_LIST" 
   (	"ISSUE_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
	 "MEMBER_ID" NUMBER(10) NOT NULL, 
	"BOOK_ID" NUMBER(10) NOT NULL, 
	"ISSUE_DATE" DATE, 
	"ADMIN_ID" VARCHAR2(255), 
	 PRIMARY KEY ("ISSUE_ID"),
	 
	 CONSTRAINT "ISS_MEM_FK" FOREIGN KEY ("MEMBER_ID")
	  REFERENCES "C##INSLIB"."MEMBER" ("MEMBER_ID") ENABLE, 
	 CONSTRAINT "ISS_BK_FK" FOREIGN KEY ("BOOK_ID")
	  REFERENCES "C##INSLIB"."BOOK" ("BOOK_ID") ENABLE, 
	 CONSTRAINT "ISS_AD_FK" FOREIGN KEY ("ADMIN_ID")
	  REFERENCES "C##INSLIB"."ADMIN" ("ADMIN_ID") ENABLE
   )
	 
		
CREATE TABLE "C##INSLIB"."LINKS" 
   (	"LINK_NAME" VARCHAR2(255), 
	"LINK_TEXT" VARCHAR2(255),
	"ADD_DATE" DATE,
   )
	 	
CREATE TABLE "C##INSLIB"."MEMBER" 
   (	"MEMBER_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"MEMBER_NAME" VARCHAR2(255), 
	"EMAIL" VARCHAR2(255), 
	"PHONE_NUMBER" NUMBER(20,0), 
	"BLOOD_GROUP" VARCHAR2(5), 
	"DATE_OF_BIRTH" DATE, 
	"NUM_OF_ISSUE" NUMBER(10,0),
	"ADMIN_ID" VARCHAR2(255) NOT NULL ENABLE, 
	"PASSWORD" VARCHAR2(20) NOT NULL ENABLE,
	 PRIMARY KEY ("MEMBER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE, 
	 CONSTRAINT "MEM_AD_FK" FOREIGN KEY ("ADMIN_ID")
	  REFERENCES "C##INSLIB"."ADMIN" ("ADMIN_ID") ENABLE
   ) 
		
		
CREATE TABLE "C##INSLIB"."MEMBER_OTHERS" 
   (	"MEMBER_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"DEPT" VARCHAR2(255), 
	"ADDRESS" VARCHAR2(255), 
	"DESIGNATION" VARCHAR2(255), 
	"ISSUE_LIMIT" NUMBER(10),
	 CHECK ("MEMBER_ID" IS NOT NULL) ENABLE, 
	 CONSTRAINT "OTH_MEM_FK" FOREIGN KEY ("MEMBER_ID")
	  REFERENCES "C##INSLIB"."MEMBER" ("MEMBER_ID") ENABLE
   )
	
CREATE TABLE "C##INSLIB"."MEMBER_STUDENT" 
   (	"DEPT" VARCHAR2(255), 
	"STUDENT_ID" NUMBER, 
	"RESIDENCE" VARCHAR2(255),
	"ISSUE_LIMIT" NUMBER(10), 
	"MEMBER_ID" NUMBER(10,0) NOT NULL ENABLE, 
	 CONSTRAINT "SYS_C007576" CHECK ("MEMBER_ID" IS NOT NULL) ENABLE, 
	 CONSTRAINT "STU_MEM_FK" FOREIGN KEY ("MEMBER_ID")
	  REFERENCES "C##INSLIB"."MEMBER" ("MEMBER_ID") ENABLE
   )
		
CREATE TABLE "C##INSLIB"."MEMBER_TEACHER" 
   (	"MEMBER_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"DEPT" VARCHAR2(255), 
	"ADDRESS" VARCHAR2(255), 
	"TEACHER_ID" VARCHAR2(255), 
	"DESIGNATION" VARCHAR2(255), 
	"ISSUE_LIMIT" NUMBER(10),
	 CHECK ("MEMBER_ID" IS NOT NULL) ENABLE, 
	 CONSTRAINT "TEA_MEM_FK" FOREIGN KEY ("MEMBER_ID")
	  REFERENCES "C##INSLIB"."MEMBER" ("MEMBER_ID") ENABLE
   )
	
CREATE TABLE "C##INSLIB"."NEWS_AND_EVENTS" 
   (	"NEWS_DATE" DATE, 
	"IMAGE" BLOB, 
	"DESCRIPTION" VARCHAR2(255)
   ) 
		
CREATE TABLE "C##INSLIB"."PUBLISHER" 
   (	"PUBLISHER_NAME" VARCHAR2(255) NOT NULL ENABLE, 
	"ADDRESS" VARCHAR2(255), 
	"PHONE_NUMBER" VARCHAR2(255), 
	 PRIMARY KEY ("PUBLISHER_NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE
   ) 
	
CREATE TABLE "C##INSLIB"."REVIEW_LIST" 
   (	"MEMBER_ID" NUMBER NOT NULL ENABLE, 
	"BOOK_ID" NUMBER, 
	"REVIEW_TEXT" VARCHAR2(255), 
	 CONSTRAINT "REV_MEM_FK" FOREIGN KEY ("MEMBER_ID")
	  REFERENCES "C##INSLIB"."MEMBER" ("MEMBER_ID") ENABLE, 
	 CONSTRAINT "REV_BK_FK" FOREIGN KEY ("BOOK_ID")
	  REFERENCES "C##INSLIB"."BOOK" ("BOOK_ID") ENABLE
   )
	 
CREATE TABLE "C##INSLIB"."SUGG_LIST"
   (	"MEMBER_ID" NUMBER(10) NOT NULL ENABLE, 
	    "MESSAGE" VARCHAR2(255)
	    CONSTRAINT "SUG_MEM_FK" FOREIGN KEY ("MEMBER_ID")
	    REFERENCES "C##INSLIB"."MEMBER" ("MEMBER_ID") ENABLE, 
   )
		

CREATE TABLE "C##INSLIB"."FAV_LIST" 
   (	"MEMBER_ID" NUMBER NOT NULL ENABLE, 
	"BOOK_ID" NUMBER, 
	 CONSTRAINT "FAV_MEM_FK" FOREIGN KEY ("MEMBER_ID")
	  REFERENCES "C##INSLIB"."MEMBER" ("MEMBER_ID") ENABLE, 
	 CONSTRAINT "FAV_BK_FK" FOREIGN KEY ("BOOK_ID")
	  REFERENCES "C##INSLIB"."BOOK" ("BOOK_ID") ENABLE
   )
										 
CREATE TABLE "C##INSLIB"."CONTACT_US" 
   (
	"NAME" VARCHAR2(255), 
	"EMAIL" VARCHAR2(255), 
	"PHONE_NUMBER" VARCHAR2(20), 
	 "MESSAGE" VARCHAR2(255)
	 )						

---Insert query

INSERT INTO ADMIN (ADMIN_ID, ADMIN_PSW, NAME, EMAIL, PHONE_NUMBER)
VALUES ('AD1','4321', 'ADMIN1', 'ad1@gmail.com', 01703902176) ;	

INSERT INTO AUTHOR (AUTHOR_ID, AUTHOR_NAME, NATIONALITY, "LIFE-SPAN") VALUES ('SMA', 'SYED MUJTABA ALI' , 'BENGALI', ' JAN-1911: MAY-76') ;

INSERT INTO PUBLISHER (PUBLISHER_NAME, ADDRESS, PHONE_NUMBER)
VALUES ('HAKKANI', 'BANGLABAZAR, DHAKA-1212', '016874837');

INSERT INTO BOOK (BOOK_ID, BOOK_NAME, AUTHOR_ID, PUBLISHER_NAME, COVER_IMAGE, STATUS, DATE_OF_ARRIVAL, YEAR, EDITION, NO_OF_PAGES, ADMIN_ID, LANGUAGE)
VALUES (12, 'CHACHA KAHINI', 'SMA', 'HAKKANI', NULL, 'AVAILABLE', NULL, 2008, 'THIRD', 234, 'AD1', 'BANGLA') ;

INSERT INTO MEMBER (MEMBER_ID, MEMBER_NAME, EMAIL, PHONE_NUMBER, BLOOD_GROUP, DATE_OF_BIRTH, ADMIN_ID,PASSWORD)
VALUES (12, 'SAAD', 'saadfgr@gmail.com', '016888888', 'A+', '4-JUN-2004', 'AD1','111') ;

INSERT INTO ISSUE_LIST (MEMBER_ID, BOOK_ID,ISSUE_DATE,ADMIN_ID)
VALUES (11, 11, '4-JAN-2022', 'AD1') ;	 

INSERT INTO APPLICANT (NAME, DESIGNATION, DEPT, ID, DATE_OF_BIRTH,ADDRESS,EMAIL, PHONE_NUMBER, BLOOD_GROUP)
VALUES ();

INSERT INTO REVIEW_LIST (MEMBER_ID,BOOK_ID,REVIEW_TEXT)
VALUES(12, 11, 'Writer has a good sense of humour');

INSERT INTO FAV_LIST VALUES();

INSERT INTO LINKS VALUES();

INSERT INTO NEWS_AND_EVENTS VALUES();


		
CREATE OR REPLACE TRIGGER DELETE_BOOK
BEFORE DELETE
ON BOOK
FOR EACH ROW
DECLARE
    V_BOOK_ID NUMBER(10);
    V_MEMBER_ID NUMBER(10,0);
BEGIN
    V_BOOK_ID := :OLD.BOOK_ID;
    BEGIN
       DELETE FROM FAV_LIST
       WHERE FAV_LIST.BOOK_ID = V_BOOK_ID;

       DELETE FROM BOOKLIST_ACADEMIC
       WHERE BOOKLIST_ACADEMIC.BOOK_ID = V_BOOK_ID;

       DELETE FROM BOOKLIST_OTHERS
       WHERE BOOKLIST_OTHERS.BOOK_ID = V_BOOK_ID;

       DELETE FROM REVIEW_LIST
       WHERE REVIEW_LIST.BOOK_ID = V_BOOK_ID;
       DBMS_OUTPUT.PUT_LINE('DELETED');
    END;

    FOR R IN (SELECT * FROM ISSUE_LIST WHERE ISSUE_LIST.BOOK_ID = V_BOOK_ID)
    LOOP
        V_MEMBER_ID := R.MEMBER_ID;
        UPDATE MEMBER SET MEMBER.NUM_OF_ISSUE = (MEMBER.NUM_OF_ISSUE - 1)
        WHERE MEMBER_ID = V_MEMBER_ID;
    END LOOP;
    BEGIN
        DELETE FROM ISSUE_LIST
        WHERE ISSUE_LIST.BOOK_ID = V_BOOK_ID;

    END;
END;


CREATE OR REPLACE TRIGGER ISSUE_BOOK
BEFORE INSERT
ON ISSUE_LIST
FOR EACH ROW
DECLARE
    V_BOOK_ID NUMBER(10);
    V_MEMBER_ID NUMBER(10,0);
BEGIN
    V_BOOK_ID := :NEW.BOOK_ID;
    V_MEMBER_ID := :NEW.MEMBER_ID;
    UPDATE MEMBER SET MEMBER.NUM_OF_ISSUE = (MEMBER.NUM_OF_ISSUE + 1)
    WHERE MEMBER_ID = V_MEMBER_ID;

    UPDATE BOOK SET BOOK.STATUS = 'NOT AVAILABLE'
    WHERE BOOK.BOOK_ID = V_BOOK_ID;
    DBMS_OUTPUT.PUT_LINE('INSERTED');
END;



CREATE OR REPLACE TRIGGER DELETE_ISSUE
BEFORE DELETE
ON ISSUE_LIST
FOR EACH ROW
DECLARE
    V_BOOK_ID NUMBER(10);
    V_MEMBER_ID NUMBER(10,0);
BEGIN
    V_BOOK_ID := :OLD.BOOK_ID;
    V_MEMBER_ID := :OLD.MEMBER_ID;

    UPDATE BOOK SET BOOK.STATUS = 'AVAILABLE'
    WHERE BOOK_ID = V_BOOK_ID;

    UPDATE MEMBER SET MEMBER.NUM_OF_ISSUE = (MEMBER.NUM_OF_ISSUE - 1)
    WHERE MEMBER_ID = V_MEMBER_ID;

END;

CREATE OR REPLACE FUNCTION BOOK_ID_GENERATOR(N IN NUMBER,ID IN NUMBER)
RETURN NUMBER IS
 I NUMBER(10) := N;
 APPEND NUMBER := ID;
 ANSWER NUMBER;
BEGIN
  WHILE I > 0
  LOOP
    I := I/10;
    APPEND := APPEND * 10;
  END LOOP;
  ANSWER := APPEND + N;
  RETURN ANSWER;
END;

CREATE SEQUENCE BOOK__ID__SEQ INCREMENT BY 1 START WITH 1;

CREATE OR REPLACE PROCEDURE GENERATE_BOOK_ID(PRE_ID IN NUMBER,REQ_ID OUT NUMBER) IS
BEGIN
   REQ_ID := BOOK_ID_GENERATOR( BOOK__ID__SEQ.nextval, PRE_ID);
END;
